 									** NOTES OF TREE**


							1) VIDEO: Terminology

TREE IS A COLLECTION OF NODES, VERTICES AND EDGES, IF N NODE THERE IS 
N-1 EDGES

Link : http://www.btechsmartclass.com/data_structures/tree-terminology.html

1. Root : the first node is called as Root Node. Every tree must have a root node. We can say that the root node is the origin of the tree data structure. 
In any tree, there must be only one root node.
 We never have multiple root nodes in a tree.

I. EDGES: the connecting link between any two nodes is called as EDGE. 
In a tree with 'N' number of nodes there will be a maximum of 'N-1' number of edges.

2. PARENT: the node which is a predecessor of any node is called as PARENT NODE. In simple words, 
the node which has a branch from it to any other node is called a parent node. Parent node can also be defined as "The node which has child / children".

3. CHILD: the node which is descendant of any node is called as CHILD Node. In simple words, 
the node which has a link from its parent node is called as child node. In a tree, any parent node can have any number of child nodes.
 In a tree, all the nodes except root are child nodes.

4.SIBILING: nodes which belong to same Parent are called as SIBLINGS. In simple words, the nodes with the same parent are called Sibling nodes.

5. DESCENDENTS: A node that is connected to all lower-level nodes is called an "ancestor". The connected lower-level nodes are "descendants" of the ancestor node

6. ANCESTORS: An ancestor of a node is any other node on the path from the node to the root. A descendant is the inverse relationship of ancestor

7. DEGREE OF NODE:the total number of children of a node is called as DEGREE of that Node. In simple words, the Degree of a node is total number of children it has.
 The highest degree of a node among all the nodes in a tree is called as 'Degree of Tree'

8. INTERNAL/EXTERNAL NODES: nodes other than leaf nodes are called as Internal Nodes. The root node is also said to be Internal Node if the tree has more than one node. 
Internal nodes are also called as 'Non-Terminal' nodes.

9. LEVELS:the root node is said to be at Level 0 and the children of root node are at Level 1 and the children of the nodes which are at Level 1 will be at Level 2 and so on... 
In simple words, in a tree each step from top to bottom is called as a Level and the Level count starts with '0' and incremented by one at each level (Step).

10. HEIGHT: the total number of edges from leaf node to a particular node in the longest path is called as HEIGHT of that Node.
 In a tree, height of the root node is said to be height of the tree. In a tree, height of all leaf nodes is '0'.

11. FOREST: collection of tree is an forest 

BINARY TREE:
A binary tree is a tree-type non-linear data structure with a maximum of two children for each parent. 
Every node in a binary tree has a left and right reference along with the data element. 
The node at the top of the hierarchy of a tree is called the root node. The nodes that hold other sub-nodes are the parent nodes.
BINARY TREE HAVE 0, 1 OR 2 CHILDREN



						2) VIDEO : NUMBER OF BINARY TREE IN GIVEN NODE

IF WE GIVEN 3 NODE THEN HOW MANY TYPE OF NODE WE CAN MAKE IN BINARY TREE

THERE IS A TWO TYPE OF NODE:
1. unlabelled node
2. labelled node

unlabeled nodes are empty node there is no nodes:

1. if 3 node is given then how many un labelled shape we can get 
for this we have a formula to find how many shapes we can find

                 2N
                   CN
CATALAN NUMBER=  -------
                  N+1

IF N IS 3 THEN,  6 C3/ 3+1 =  [6*5*4/3*2*1] / 4 = 4 AND UP 4 GET CANCEL THEN 3 AND 6 AND 2 AND 2 THE REMAINING IS 5 = THE ANSWER IS 5
WE CAN FIND 5 SHAPE IN UNLABELLED NODE


2. HOW TO FIND THE MAXIMUM HEIGHT OF TREES IN UNLABELLED NODE
FORMULA  IS MAX HEIGHT = 2 ^N-1

IF NODE IS 5 THEN 2 ^ 5-1 = 2 ^4 = 32
WE CAN FIND HEIGHT OF 5 NODE IN 32


LABELLED NODE:
IT IS LABELLED BY ANY VARIABLE LIKE IN NUMBER, STRING 

TO FIND SHAPE IN LABELLED NODE, WE USE FORMULA 

                 2N
                   CN
CATALAN NUMBER=  ------- * N!
                  N+1


						3) VIDEO : HOW TO FIND HEIGHT VS NODE IN BINARY TREE


TO FIND MAXIMUM AND MINIMUM HEIGHT WITH USING NODE:

MINIMUM HEIGHT = LOG (N+1) -1
		    2


MAXIMUM HEIGHT = N-1



TO FIND MAXIMUM AND MINIMUM NODE USING HEIGHT:

MINIMUM NODE : H + 1


		H+1
MAXIMUM NODE = 2    - 1


						4) VIDEO: INTERNAL NODE VS EXTERNEL NODE


INTERNAL NODE IS HAVING A CHILD NODE AND EXTERNAL NODE IS HAVING LAST NODE WHICH IS LEAF

FORMULA FOR INTERNAL AND EXTERNAL NODE USING DEGREE OF NODE

              FORMULA = DEG(0) == DEG(2)+1

EXAMPLE IF DEG(2) = 3
	   DEG(1) = 5
	   DEG(0) = 4 
DEG(0) == DEG(2)+1 PROVED


						5) VIDEO : STRICT OR PROPER BINARY TREE


THE FULL BINARY MUST ONLY 0 OR 2 DEGREE IT MUST BE IN BINARY 
NO 1 DEGREE APPROACH.


A strictly binary tree with n leaves always contains 2n -1 nodes.
If every non-leaf node in a binary tree has nonempty left and right subtrees, 
the tree is termed a strictly binary tree. Or, to put it another way, 
all of the nodes in a strictly binary tree are of degree zero or two, never degree one


						6) VIDEO: STRICT BINARY TREE NODE AND HEIGHT


AS ABOVE FORMULA FOR TO FIND MAXIMUM AND MINIMUM IS SAME AS STRICT BINARY TREE
BUT THERE IS AN CHANGES LETS SEE:

TO FIND MAXIMUM AND MINIMUM HEIGHT WITH USING NODE:

MINIMUM HEIGHT = LOG (N+1) -1
		    2


MAXIMUM HEIGHT = N-1
		-----
		  2


TO FIND MAXIMUM AND MINIMUM NODE USING HEIGHT:

MINIMUM NODE : 2H + 1


		H+1
MAXIMUM NODE = 2    - 1



						7) VIDEO : INTERNAL AND EXTERNAL NODES IN STRICT BINARY TREE


IN STRICT BINARY TREE IS HAVE ONLY 2 NODE OR 0 EMPTY LEAF
AS IN NORMAL BINARY TREE HERE TO SAME 

DEG(0) == DEG(2)+1

I = E+1



						8) VIDEO : N-ARY TREES AND STRICT N-ARY TREES


N-ARYY TREES IS WE CAN N NUMBER OF NODE TO THE ROOT AND SUBTREE

EXAMPLE: N = 3, THEN WE CAN HAVE A DEGREE OF NODE {0,1,2,3}
	 N = 6, {0,1,2,3,4,5,6}

N IS CAPACITY OF DEGREE OF NODES SO IT CAN BE MINIMUM OF N AND MAXIMUM OF 0

EXAMPLE : IF N = 4, THEN THE CAPACITY OF DEGREE OF NODE IS {0,1,2,3,4}, BUT WE CAN HAVE 2 OR 3 DEGREE, IT MUST BE BELOW N CAPACITY

The N-ary tree is a tree that allows us to have n number of children of a particular node, 
hence the name N-ary, making it slightly complex than the very common binary trees 
that allow us to have at most 2 children of a particular node.

STRICT N-ARY TREE:

in strict n-ary tree it should have 0 degree and n degree not in between degrees.

if N = 4 then {0,4} as in binary tree



						9) Video: N-ary trees analysis


TO FIND MAXIMUM AND MINIMUM HEIGHT WITH USING NODE: n = node, m = given n-ary capacity, H = height

MINIMUM HEIGHT = LOG (N(m-1)+1) -1
		    m


MAXIMUM HEIGHT = N-1
		-----
		  m


TO FIND MAXIMUM AND MINIMUM NODE USING HEIGHT:

MINIMUM NODE : MH + 1


		H+1
MAXIMUM NODE = M    - 1
	      -----------
		M-1


IN STRICT N-ARY TREE IS HAVE ONLY N NODE OR 0 EMPTY LEAF
AS IN NORMAL BINARY TREE HERE TO SAME 

i = deg(0)
M = capacity of node given in N-ary
e = deg(m)

e = (M-1)i + 1


							10) representation of Binary tree


A B C D E F G			A
1 2 3 4 5 6 7
			    B	    C
			
			D	E  F	G



THE binary representaion of this example we see:


variable Root L.child R.child

A	  1 	2	3

B	  2	4	5

C	  3	6	7

	  I	I*2	I*2+1

I = root
I*2 = L.child
I*2+1 = R.child


To find the parent of the child node we use [R/2]
R = node

if example:

parent of F and its node is 6

6/2 = 3

3 = C, C is parent of F



							11) Video: Linked representation of Binary tree


--------------------------------	
L.child	|     Data	|R.child|
	|		|	|
--------------------------------|
				


A B C D E F G			A
1 2 3 4 5 6 7
			    B	    C
			
			D	E  F	G


The linked representation is a node is linked with L.child and R.child of data as drawn, for each data left and right are linked.

class Node:
	def __init__(self, data):
		self.Left = None
		self.data = data
		self.right = right


deg(0) node have null of left and right 
to find null we use [i+1]
if i is num of node, example: i = 7, then 7+1= 8
totally we have 8 null pointer


							12) Video: Full and Complete Binary Tree



1)	A B C D E F G			A
	1 2 3 4 5 6 7
			   	   B	    C
			
				D     E  F	G


the 1 is full binary tree because it occupied all space but it not complete binary tree


2)	A B C D E F G			A
	1 2 3 4 5 - 7
			  	    B	    C
			
				 D      E  	G


the 2 is incomplete binary because it have blank in between the node 

3)	A B C D E F G		      A
	1 2 3 4 5 6 -
			   	 B	    C
			
			     D	    E   F

THE 3 is complete binary tree but not a full binary tree, it occupied the space and not blank in middle of tree.


	
							13) video: Strict vs Complete Binary tree


Strict is complete
complete is almost complete



1)	A B C D E F G			A
	1 2 3 4 5 - 7
			  	    B	    C
			
				 D      E  	G

1 is not strict and not complete, because strict have to be in complete 0 degree and 2 degree but C have single child and it in complete


2)	A B C D E F G		      A
	1 2 3 4 5 - -
			   	 B	    C
			
			     D	    E   

2 is having 2 = deg(2) and 3 = deg(0) it have an complete scrict and it complete too, because its almost complete of tree


3)	A B C D E F G		      A
	1 2 - - 5 7 8
			   	 B	    C
			
			     		F	G

3 is strict but not an complete tree



							14) Video: Tree Traversal

there are 4 types of tree traversal, which is:

1) pre-order traversal (Root, left, right)

2) In-order traversal (left, Root, Right)

3) post-order traversal (Left, Right, Root )

4) level order (which traverse level by level)

lets See example:


	A B C D E F G			A
	1 2 3 4 5 6 7
			   	   B	    C
			
				D     E  F	G

here we have tree, lets traverse:

1) pre-order traversal:

(A, (B,D,E), (C,F,G))

root, left, right

A,B,D,E,C,F,G


2) In-order traversal:

((D,B,E), A, (F,C,G))

LEFT, ROOT, RIGHT

D,B,E,A,F,C,G


3) POST-ORDER TRAVERSAL:

((D,E,B), (F,G,C), A)

LEFT, RIGHT, ROOT

D,E,B,F,G,C,A


4) LEVEL-ORDER TRAVERSAL: 

A,B,C,D,E,F,G

traversed from root to last leaf

Link = https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/



						






